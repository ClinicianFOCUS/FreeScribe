name: Build Workflow

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*.alpha"

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: "x64"

      # Create CUDA-enabled executable
      # - name: Install CUDA-enabled llama_cpp
      #   run: |
      #     pip install --index-url https://abetlen.github.io/llama-cpp-python/whl/cu121 --extra-index-url https://pypi.org/simple llama-cpp-python==v0.2.90
      #     pip install --index-url https://download.pytorch.org/whl/cu121 --extra-index-url https://pypi.org/simple torch==2.2.2

      # - name: Install requirements
      #   run: |
      #     pip install -r client_requirements.txt

      # - name: Run PyInstaller for NVIDIA
      #   run: |
      #     pyinstaller --additional-hooks-dir=.\scripts\hooks --add-data ".\src\FreeScribe.client\whisper-assets:whisper\assets" --add-data ".\src\FreeScribe.client\markdown:markdown" --add-data ".\src\FreeScribe.client\assets:assets" --name freescribe-client-nvidia --icon=.\src\FreeScribe.client\assets\logo.ico --noconsole .\src\FreeScribe.client\client.py

      # # Create CPU-only executable
      # - name: Uninstall CUDA-enabled llama_cpp (if necessary) and install CPU-only llama_cpp
      #   run: |
      #     pip uninstall -y llama-cpp-python torch
      #     pip install --index-url https://abetlen.github.io/llama-cpp-python/whl/cpu --extra-index-url https://pypi.org/simple llama-cpp-python==v0.2.90
      #     pip install torch==2.2.2

      # - name: Run PyInstaller for CPU-only
      #   run: |
      #     pyinstaller --additional-hooks-dir=.\scripts\hooks --add-data ".\src\FreeScribe.client\whisper-assets:whisper\assets" --add-data ".\src\FreeScribe.client\markdown:markdown" --add-data ".\src\FreeScribe.client\assets:assets" --name freescribe-client-cpu --icon=.\src\FreeScribe.client\assets\logo.ico --noconsole .\src\FreeScribe.client\client.py

      - name: Download and Set up NSIS
        run: |
          Expand-Archive -Path .\scripts\nsis.zip -DestinationPath .\scripts\nsis -Force
        shell: pwsh

      - name: Copy Plugins to NSIS Folder
        run: |
          Copy-Item -Path .\scripts\nsis-plugins\* -Destination .\scripts\nsis\nsis-binary-7423-2\Plugins -Recurse -Force
        shell: pwsh

      - name: Prepare output directory
        run: |
          mkdir -p dist

      - name: Run NSIS to build installer
        run: |
          .\scripts\nsis\nsis-binary-7423-2\makensis.exe .\scripts\install.nsi

      - name: Check if alpha release
        id: check_alpha
        run: |
          if ($env:GITHUB_REF -match "\.alpha$") {
            echo "is_alpha=true" >> $env:GITHUB_ENV
          } else {
            echo "is_alpha=false" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## What's Changed
            Add detailed changelog here.

          draft: false
          prerelease: ${{ env.is_alpha == 'true' }}

      - name: Upload Installer
        id: upload-installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/FreeScribeInstaller.exe
          asset_name: FreeScribeInstaller_windows.exe
          asset_content_type: application/octet-stream
